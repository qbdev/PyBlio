version: 2 # use CircleCI 2.0
jobs: # A basic unit of work in a run
  pre-install-pipenv: # runs not using Workflows must have a `build` job as entry point
    # directory where steps are run
    working_directory: ~/PyBlio
    docker: # run the steps with Docker
      # CircleCI Python images available at: https://hub.docker.com/r/circleci/python/
      - image: circleci/python:3.7.4
        environment: # environment variables for primary container
          PIPENV_VENV_IN_PROJECT: true
    steps: # steps that comprise the `build` job
      - checkout # check out source code to working directory
      - run: mkdir test-reports
      - run: sudo chown -R circleci:circleci /usr/local/bin
      - run: sudo chown -R circleci:circleci /usr/local/lib/python3.7/site-packages
      - restore_cache:
      # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
          key: deps9-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
      - run:
          command: |
            sudo pip install pipenv
            pipenv install
      - save_cache: # cache Python dependencies using checksum of Pipfile as the cache-key
          key: deps9-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
          paths:
            - ".venv"
            - "/usr/local/bin"
            - "/usr/local/lib/python3.6/site-packages"
  pytest_and_coverage:
    # directory where steps are run
    working_directory: ~/PyBlio
    docker: # run the steps with Docker
      # CircleCI Python images available at: https://hub.docker.com/r/circleci/python/
      - image: circleci/python:3.7.4
        environment: # environment variables for primary container
          PIPENV_VENV_IN_PROJECT: true
    steps: # steps that comprise the `build` job
      - checkout # check out source code to working directory
      - restore_cache:
          # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
          key: deps9-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
      - save_cache: # cache Python dependencies using checksum of Pipfile as the cache-key
          key: deps9-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
      - run:
          name: run pytest
          command: |
            pipenv run pytest
            pipenv run pytest --cov=core tests/
            pipenv run coverage html
            pipenv run coveralls
      - store_test_results: # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: test-results
      - store_artifacts: # Upload test summary for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
          path: test-results
          destination: test-results
  typecheck:
    # directory where steps are run
    working_directory: ~/PyBlio
    docker: # run the steps with Docker
      # CircleCI Python images available at: https://hub.docker.com/r/circleci/python/
      - image: circleci/python:3.7.4
        environment: # environment variables for primary container
          PIPENV_VENV_IN_PROJECT: true
    steps: # steps that comprise the `build` job
      - checkout # check out source code to working directory
      - restore_cache:
          # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
          key: deps9-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
      - save_cache: # cache Python dependencies using checksum of Pipfile as the cache-key
          key: deps9-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
      - run:
          name: run mypy
          command: |
            pipenv run mypy --ignore-missing-imports core tests
      - run:
          name: run pylint
          command: |
            pipenv run pylint core tests
      - store_test_results: # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: test-results
      - store_artifacts: # Upload test summary for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
          path: test-results
          destination: test-results

workflows:
  version: 2
  build_and_test:
    jobs:
    - pre-install-pipenv:
      filters:
        branches:
          only: develop
    - pytest_and_coverage:
        filters:
          branches:
            only: develop
        requires:
        - pre-install-pipenv
    - typecheck:
        filters:
          branches:
            only: develop
        requires:
        - pre-install-pipenv
